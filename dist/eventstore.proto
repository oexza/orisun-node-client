syntax = "proto3";

package eventstore;

option go_package = "orisun/eventstore";
option java_package = "com.orisun.eventstore";

import "google/protobuf/timestamp.proto";

message Position {
  int64 commit_position = 1;
  int64 prepare_position = 2;
}

message Tag {
  string key = 1;
  string value = 2;
}

message Criterion {
  repeated Tag tags = 1;
}

message Query {
  repeated Criterion criteria = 1;
}

message EventToSave {
  string event_id = 1;
  string event_type = 2;
  string data = 3;
  string metadata = 4;
}

message Event {
  string event_id = 1;
  string event_type = 2;
  string data = 3;
  string metadata = 4;
  Position position = 6;
  google.protobuf.Timestamp date_created = 7;
  string stream_id = 8;
  uint64 version = 9;
}

message WriteResult {
  Position log_position = 1;
  int64 new_stream_version = 2;
}

enum Direction {
  ASC = 0;
  DESC = 1;
}

message SaveStreamQuery{
  string name = 1;
  int64 expected_version = 2;
  Query subsetQuery = 3;
}

message SaveEventsRequest {
  string boundary = 2;
  SaveStreamQuery stream = 3;
  repeated EventToSave events = 4;
}

message GetStreamQuery{
  string name = 1;
  int64 from_version = 2;
}

message GetEventsRequest {
  Query query = 1;
  Position from_position = 2;
  uint32 count = 3;
  Direction direction = 4;
  string boundary = 5;
  GetStreamQuery stream = 6;
}

message GetEventsResponse {
  repeated Event events = 1;
}

message CatchUpSubscribeToEventStoreRequest {
  Position afterPosition = 1;
  Query query = 2;
  string subscriber_name = 3;
  string boundary = 4;
}

message CatchUpSubscribeToStreamRequest {
  Query query = 2;
  string subscriber_name = 3;
  string boundary = 4;
  string stream = 5;
  int64 afterVersion = 6;
}

service EventStore {
  rpc SaveEvents(SaveEventsRequest) returns (WriteResult) {}
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {}
  rpc CatchUpSubscribeToEvents(CatchUpSubscribeToEventStoreRequest) returns (stream Event) {}
  rpc CatchUpSubscribeToStream(CatchUpSubscribeToStreamRequest) returns (stream Event) {}
}