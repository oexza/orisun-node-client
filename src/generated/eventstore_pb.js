// source: eventstore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.eventstore.CatchUpSubscribeToEventStoreRequest', null, global);
goog.exportSymbol('proto.eventstore.CatchUpSubscribeToStreamRequest', null, global);
goog.exportSymbol('proto.eventstore.Criterion', null, global);
goog.exportSymbol('proto.eventstore.Direction', null, global);
goog.exportSymbol('proto.eventstore.Event', null, global);
goog.exportSymbol('proto.eventstore.EventToSave', null, global);
goog.exportSymbol('proto.eventstore.GetEventsRequest', null, global);
goog.exportSymbol('proto.eventstore.GetEventsResponse', null, global);
goog.exportSymbol('proto.eventstore.GetStreamQuery', null, global);
goog.exportSymbol('proto.eventstore.Position', null, global);
goog.exportSymbol('proto.eventstore.Query', null, global);
goog.exportSymbol('proto.eventstore.SaveEventsRequest', null, global);
goog.exportSymbol('proto.eventstore.SaveStreamQuery', null, global);
goog.exportSymbol('proto.eventstore.Tag', null, global);
goog.exportSymbol('proto.eventstore.WriteResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.Position.displayName = 'proto.eventstore.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.Tag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.Tag.displayName = 'proto.eventstore.Tag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.Criterion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eventstore.Criterion.repeatedFields_, null);
};
goog.inherits(proto.eventstore.Criterion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.Criterion.displayName = 'proto.eventstore.Criterion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eventstore.Query.repeatedFields_, null);
};
goog.inherits(proto.eventstore.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.Query.displayName = 'proto.eventstore.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.EventToSave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.EventToSave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.EventToSave.displayName = 'proto.eventstore.EventToSave';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.Event.displayName = 'proto.eventstore.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.WriteResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.WriteResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.WriteResult.displayName = 'proto.eventstore.WriteResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.SaveStreamQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.SaveStreamQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.SaveStreamQuery.displayName = 'proto.eventstore.SaveStreamQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.SaveEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eventstore.SaveEventsRequest.repeatedFields_, null);
};
goog.inherits(proto.eventstore.SaveEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.SaveEventsRequest.displayName = 'proto.eventstore.SaveEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.GetStreamQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.GetStreamQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.GetStreamQuery.displayName = 'proto.eventstore.GetStreamQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.GetEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.GetEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.GetEventsRequest.displayName = 'proto.eventstore.GetEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.GetEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eventstore.GetEventsResponse.repeatedFields_, null);
};
goog.inherits(proto.eventstore.GetEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.GetEventsResponse.displayName = 'proto.eventstore.GetEventsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.CatchUpSubscribeToEventStoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.CatchUpSubscribeToEventStoreRequest.displayName = 'proto.eventstore.CatchUpSubscribeToEventStoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventstore.CatchUpSubscribeToStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventstore.CatchUpSubscribeToStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventstore.CatchUpSubscribeToStreamRequest.displayName = 'proto.eventstore.CatchUpSubscribeToStreamRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitPosition: jspb.Message.getFieldWithDefault(msg, 1, 0),
    preparePosition: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.Position}
 */
proto.eventstore.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.Position;
  return proto.eventstore.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.Position}
 */
proto.eventstore.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommitPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPreparePosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitPosition();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPreparePosition();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 commit_position = 1;
 * @return {number}
 */
proto.eventstore.Position.prototype.getCommitPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eventstore.Position} returns this
 */
proto.eventstore.Position.prototype.setCommitPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 prepare_position = 2;
 * @return {number}
 */
proto.eventstore.Position.prototype.getPreparePosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eventstore.Position} returns this
 */
proto.eventstore.Position.prototype.setPreparePosition = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.Tag.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.Tag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.Tag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Tag.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.Tag}
 */
proto.eventstore.Tag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.Tag;
  return proto.eventstore.Tag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.Tag}
 */
proto.eventstore.Tag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.Tag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.Tag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Tag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.eventstore.Tag.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.Tag} returns this
 */
proto.eventstore.Tag.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.eventstore.Tag.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.Tag} returns this
 */
proto.eventstore.Tag.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eventstore.Criterion.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.Criterion.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.Criterion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.Criterion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Criterion.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.eventstore.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.Criterion}
 */
proto.eventstore.Criterion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.Criterion;
  return proto.eventstore.Criterion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.Criterion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.Criterion}
 */
proto.eventstore.Criterion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eventstore.Tag;
      reader.readMessage(value,proto.eventstore.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.Criterion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.Criterion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.Criterion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Criterion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.eventstore.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Tag tags = 1;
 * @return {!Array<!proto.eventstore.Tag>}
 */
proto.eventstore.Criterion.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.eventstore.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eventstore.Tag, 1));
};


/**
 * @param {!Array<!proto.eventstore.Tag>} value
 * @return {!proto.eventstore.Criterion} returns this
*/
proto.eventstore.Criterion.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.eventstore.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eventstore.Tag}
 */
proto.eventstore.Criterion.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.eventstore.Tag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eventstore.Criterion} returns this
 */
proto.eventstore.Criterion.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eventstore.Query.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    criteriaList: jspb.Message.toObjectList(msg.getCriteriaList(),
    proto.eventstore.Criterion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.Query}
 */
proto.eventstore.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.Query;
  return proto.eventstore.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.Query}
 */
proto.eventstore.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eventstore.Criterion;
      reader.readMessage(value,proto.eventstore.Criterion.deserializeBinaryFromReader);
      msg.addCriteria(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCriteriaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.eventstore.Criterion.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Criterion criteria = 1;
 * @return {!Array<!proto.eventstore.Criterion>}
 */
proto.eventstore.Query.prototype.getCriteriaList = function() {
  return /** @type{!Array<!proto.eventstore.Criterion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eventstore.Criterion, 1));
};


/**
 * @param {!Array<!proto.eventstore.Criterion>} value
 * @return {!proto.eventstore.Query} returns this
*/
proto.eventstore.Query.prototype.setCriteriaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.eventstore.Criterion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eventstore.Criterion}
 */
proto.eventstore.Query.prototype.addCriteria = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.eventstore.Criterion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eventstore.Query} returns this
 */
proto.eventstore.Query.prototype.clearCriteriaList = function() {
  return this.setCriteriaList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.EventToSave.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.EventToSave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.EventToSave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.EventToSave.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.EventToSave}
 */
proto.eventstore.EventToSave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.EventToSave;
  return proto.eventstore.EventToSave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.EventToSave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.EventToSave}
 */
proto.eventstore.EventToSave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.EventToSave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.EventToSave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.EventToSave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.EventToSave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.eventstore.EventToSave.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.EventToSave} returns this
 */
proto.eventstore.EventToSave.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event_type = 2;
 * @return {string}
 */
proto.eventstore.EventToSave.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.EventToSave} returns this
 */
proto.eventstore.EventToSave.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string data = 3;
 * @return {string}
 */
proto.eventstore.EventToSave.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.EventToSave} returns this
 */
proto.eventstore.EventToSave.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string metadata = 4;
 * @return {string}
 */
proto.eventstore.EventToSave.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.EventToSave} returns this
 */
proto.eventstore.EventToSave.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 4, ""),
    position: (f = msg.getPosition()) && proto.eventstore.Position.toObject(includeInstance, f),
    dateCreated: (f = msg.getDateCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    streamId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    version: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.Event}
 */
proto.eventstore.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.Event;
  return proto.eventstore.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.Event}
 */
proto.eventstore.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 6:
      var value = new proto.eventstore.Position;
      reader.readMessage(value,proto.eventstore.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDateCreated(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.eventstore.Position.serializeBinaryToWriter
    );
  }
  f = message.getDateCreated();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.eventstore.Event.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.Event} returns this
 */
proto.eventstore.Event.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event_type = 2;
 * @return {string}
 */
proto.eventstore.Event.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.Event} returns this
 */
proto.eventstore.Event.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string data = 3;
 * @return {string}
 */
proto.eventstore.Event.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.Event} returns this
 */
proto.eventstore.Event.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string metadata = 4;
 * @return {string}
 */
proto.eventstore.Event.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.Event} returns this
 */
proto.eventstore.Event.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Position position = 6;
 * @return {?proto.eventstore.Position}
 */
proto.eventstore.Event.prototype.getPosition = function() {
  return /** @type{?proto.eventstore.Position} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.Position, 6));
};


/**
 * @param {?proto.eventstore.Position|undefined} value
 * @return {!proto.eventstore.Event} returns this
*/
proto.eventstore.Event.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.Event} returns this
 */
proto.eventstore.Event.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.Event.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp date_created = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.eventstore.Event.prototype.getDateCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.eventstore.Event} returns this
*/
proto.eventstore.Event.prototype.setDateCreated = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.Event} returns this
 */
proto.eventstore.Event.prototype.clearDateCreated = function() {
  return this.setDateCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.Event.prototype.hasDateCreated = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string stream_id = 8;
 * @return {string}
 */
proto.eventstore.Event.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.Event} returns this
 */
proto.eventstore.Event.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint64 version = 9;
 * @return {number}
 */
proto.eventstore.Event.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.eventstore.Event} returns this
 */
proto.eventstore.Event.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.WriteResult.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.WriteResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.WriteResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.WriteResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    logPosition: (f = msg.getLogPosition()) && proto.eventstore.Position.toObject(includeInstance, f),
    newStreamVersion: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.WriteResult}
 */
proto.eventstore.WriteResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.WriteResult;
  return proto.eventstore.WriteResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.WriteResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.WriteResult}
 */
proto.eventstore.WriteResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eventstore.Position;
      reader.readMessage(value,proto.eventstore.Position.deserializeBinaryFromReader);
      msg.setLogPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNewStreamVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.WriteResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.WriteResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.WriteResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.WriteResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eventstore.Position.serializeBinaryToWriter
    );
  }
  f = message.getNewStreamVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Position log_position = 1;
 * @return {?proto.eventstore.Position}
 */
proto.eventstore.WriteResult.prototype.getLogPosition = function() {
  return /** @type{?proto.eventstore.Position} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.Position, 1));
};


/**
 * @param {?proto.eventstore.Position|undefined} value
 * @return {!proto.eventstore.WriteResult} returns this
*/
proto.eventstore.WriteResult.prototype.setLogPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.WriteResult} returns this
 */
proto.eventstore.WriteResult.prototype.clearLogPosition = function() {
  return this.setLogPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.WriteResult.prototype.hasLogPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 new_stream_version = 2;
 * @return {number}
 */
proto.eventstore.WriteResult.prototype.getNewStreamVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eventstore.WriteResult} returns this
 */
proto.eventstore.WriteResult.prototype.setNewStreamVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.SaveStreamQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.SaveStreamQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.SaveStreamQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.SaveStreamQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expectedVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subsetquery: (f = msg.getSubsetquery()) && proto.eventstore.Query.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.SaveStreamQuery}
 */
proto.eventstore.SaveStreamQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.SaveStreamQuery;
  return proto.eventstore.SaveStreamQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.SaveStreamQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.SaveStreamQuery}
 */
proto.eventstore.SaveStreamQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpectedVersion(value);
      break;
    case 3:
      var value = new proto.eventstore.Query;
      reader.readMessage(value,proto.eventstore.Query.deserializeBinaryFromReader);
      msg.setSubsetquery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.SaveStreamQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.SaveStreamQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.SaveStreamQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.SaveStreamQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpectedVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSubsetquery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.eventstore.Query.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eventstore.SaveStreamQuery.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.SaveStreamQuery} returns this
 */
proto.eventstore.SaveStreamQuery.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 expected_version = 2;
 * @return {number}
 */
proto.eventstore.SaveStreamQuery.prototype.getExpectedVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eventstore.SaveStreamQuery} returns this
 */
proto.eventstore.SaveStreamQuery.prototype.setExpectedVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Query subsetQuery = 3;
 * @return {?proto.eventstore.Query}
 */
proto.eventstore.SaveStreamQuery.prototype.getSubsetquery = function() {
  return /** @type{?proto.eventstore.Query} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.Query, 3));
};


/**
 * @param {?proto.eventstore.Query|undefined} value
 * @return {!proto.eventstore.SaveStreamQuery} returns this
*/
proto.eventstore.SaveStreamQuery.prototype.setSubsetquery = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.SaveStreamQuery} returns this
 */
proto.eventstore.SaveStreamQuery.prototype.clearSubsetquery = function() {
  return this.setSubsetquery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.SaveStreamQuery.prototype.hasSubsetquery = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eventstore.SaveEventsRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.SaveEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.SaveEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.SaveEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.SaveEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    boundary: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stream: (f = msg.getStream()) && proto.eventstore.SaveStreamQuery.toObject(includeInstance, f),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.eventstore.EventToSave.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.SaveEventsRequest}
 */
proto.eventstore.SaveEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.SaveEventsRequest;
  return proto.eventstore.SaveEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.SaveEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.SaveEventsRequest}
 */
proto.eventstore.SaveEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoundary(value);
      break;
    case 3:
      var value = new proto.eventstore.SaveStreamQuery;
      reader.readMessage(value,proto.eventstore.SaveStreamQuery.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 4:
      var value = new proto.eventstore.EventToSave;
      reader.readMessage(value,proto.eventstore.EventToSave.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.SaveEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.SaveEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.SaveEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.SaveEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoundary();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.eventstore.SaveStreamQuery.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.eventstore.EventToSave.serializeBinaryToWriter
    );
  }
};


/**
 * optional string boundary = 2;
 * @return {string}
 */
proto.eventstore.SaveEventsRequest.prototype.getBoundary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.SaveEventsRequest} returns this
 */
proto.eventstore.SaveEventsRequest.prototype.setBoundary = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SaveStreamQuery stream = 3;
 * @return {?proto.eventstore.SaveStreamQuery}
 */
proto.eventstore.SaveEventsRequest.prototype.getStream = function() {
  return /** @type{?proto.eventstore.SaveStreamQuery} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.SaveStreamQuery, 3));
};


/**
 * @param {?proto.eventstore.SaveStreamQuery|undefined} value
 * @return {!proto.eventstore.SaveEventsRequest} returns this
*/
proto.eventstore.SaveEventsRequest.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.SaveEventsRequest} returns this
 */
proto.eventstore.SaveEventsRequest.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.SaveEventsRequest.prototype.hasStream = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated EventToSave events = 4;
 * @return {!Array<!proto.eventstore.EventToSave>}
 */
proto.eventstore.SaveEventsRequest.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.eventstore.EventToSave>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eventstore.EventToSave, 4));
};


/**
 * @param {!Array<!proto.eventstore.EventToSave>} value
 * @return {!proto.eventstore.SaveEventsRequest} returns this
*/
proto.eventstore.SaveEventsRequest.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.eventstore.EventToSave=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eventstore.EventToSave}
 */
proto.eventstore.SaveEventsRequest.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.eventstore.EventToSave, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eventstore.SaveEventsRequest} returns this
 */
proto.eventstore.SaveEventsRequest.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.GetStreamQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.GetStreamQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.GetStreamQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.GetStreamQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromVersion: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.GetStreamQuery}
 */
proto.eventstore.GetStreamQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.GetStreamQuery;
  return proto.eventstore.GetStreamQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.GetStreamQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.GetStreamQuery}
 */
proto.eventstore.GetStreamQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFromVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.GetStreamQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.GetStreamQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.GetStreamQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.GetStreamQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eventstore.GetStreamQuery.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.GetStreamQuery} returns this
 */
proto.eventstore.GetStreamQuery.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 from_version = 2;
 * @return {number}
 */
proto.eventstore.GetStreamQuery.prototype.getFromVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eventstore.GetStreamQuery} returns this
 */
proto.eventstore.GetStreamQuery.prototype.setFromVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.GetEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.GetEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.GetEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.GetEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.eventstore.Query.toObject(includeInstance, f),
    fromPosition: (f = msg.getFromPosition()) && proto.eventstore.Position.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 4, 0),
    boundary: jspb.Message.getFieldWithDefault(msg, 5, ""),
    stream: (f = msg.getStream()) && proto.eventstore.GetStreamQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.GetEventsRequest}
 */
proto.eventstore.GetEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.GetEventsRequest;
  return proto.eventstore.GetEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.GetEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.GetEventsRequest}
 */
proto.eventstore.GetEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eventstore.Query;
      reader.readMessage(value,proto.eventstore.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = new proto.eventstore.Position;
      reader.readMessage(value,proto.eventstore.Position.deserializeBinaryFromReader);
      msg.setFromPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {!proto.eventstore.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoundary(value);
      break;
    case 6:
      var value = new proto.eventstore.GetStreamQuery;
      reader.readMessage(value,proto.eventstore.GetStreamQuery.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.GetEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.GetEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.GetEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.GetEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eventstore.Query.serializeBinaryToWriter
    );
  }
  f = message.getFromPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eventstore.Position.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getBoundary();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.eventstore.GetStreamQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional Query query = 1;
 * @return {?proto.eventstore.Query}
 */
proto.eventstore.GetEventsRequest.prototype.getQuery = function() {
  return /** @type{?proto.eventstore.Query} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.Query, 1));
};


/**
 * @param {?proto.eventstore.Query|undefined} value
 * @return {!proto.eventstore.GetEventsRequest} returns this
*/
proto.eventstore.GetEventsRequest.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.GetEventsRequest} returns this
 */
proto.eventstore.GetEventsRequest.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.GetEventsRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Position from_position = 2;
 * @return {?proto.eventstore.Position}
 */
proto.eventstore.GetEventsRequest.prototype.getFromPosition = function() {
  return /** @type{?proto.eventstore.Position} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.Position, 2));
};


/**
 * @param {?proto.eventstore.Position|undefined} value
 * @return {!proto.eventstore.GetEventsRequest} returns this
*/
proto.eventstore.GetEventsRequest.prototype.setFromPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.GetEventsRequest} returns this
 */
proto.eventstore.GetEventsRequest.prototype.clearFromPosition = function() {
  return this.setFromPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.GetEventsRequest.prototype.hasFromPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 count = 3;
 * @return {number}
 */
proto.eventstore.GetEventsRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.eventstore.GetEventsRequest} returns this
 */
proto.eventstore.GetEventsRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Direction direction = 4;
 * @return {!proto.eventstore.Direction}
 */
proto.eventstore.GetEventsRequest.prototype.getDirection = function() {
  return /** @type {!proto.eventstore.Direction} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.eventstore.Direction} value
 * @return {!proto.eventstore.GetEventsRequest} returns this
 */
proto.eventstore.GetEventsRequest.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string boundary = 5;
 * @return {string}
 */
proto.eventstore.GetEventsRequest.prototype.getBoundary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.GetEventsRequest} returns this
 */
proto.eventstore.GetEventsRequest.prototype.setBoundary = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional GetStreamQuery stream = 6;
 * @return {?proto.eventstore.GetStreamQuery}
 */
proto.eventstore.GetEventsRequest.prototype.getStream = function() {
  return /** @type{?proto.eventstore.GetStreamQuery} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.GetStreamQuery, 6));
};


/**
 * @param {?proto.eventstore.GetStreamQuery|undefined} value
 * @return {!proto.eventstore.GetEventsRequest} returns this
*/
proto.eventstore.GetEventsRequest.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.GetEventsRequest} returns this
 */
proto.eventstore.GetEventsRequest.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.GetEventsRequest.prototype.hasStream = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eventstore.GetEventsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.GetEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.GetEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.GetEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.GetEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.eventstore.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.GetEventsResponse}
 */
proto.eventstore.GetEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.GetEventsResponse;
  return proto.eventstore.GetEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.GetEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.GetEventsResponse}
 */
proto.eventstore.GetEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eventstore.Event;
      reader.readMessage(value,proto.eventstore.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.GetEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.GetEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.GetEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.GetEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.eventstore.Event.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Event events = 1;
 * @return {!Array<!proto.eventstore.Event>}
 */
proto.eventstore.GetEventsResponse.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.eventstore.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eventstore.Event, 1));
};


/**
 * @param {!Array<!proto.eventstore.Event>} value
 * @return {!proto.eventstore.GetEventsResponse} returns this
*/
proto.eventstore.GetEventsResponse.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.eventstore.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eventstore.Event}
 */
proto.eventstore.GetEventsResponse.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.eventstore.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eventstore.GetEventsResponse} returns this
 */
proto.eventstore.GetEventsResponse.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.CatchUpSubscribeToEventStoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    afterposition: (f = msg.getAfterposition()) && proto.eventstore.Position.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.eventstore.Query.toObject(includeInstance, f),
    subscriberName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    boundary: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.CatchUpSubscribeToEventStoreRequest}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.CatchUpSubscribeToEventStoreRequest;
  return proto.eventstore.CatchUpSubscribeToEventStoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.CatchUpSubscribeToEventStoreRequest}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eventstore.Position;
      reader.readMessage(value,proto.eventstore.Position.deserializeBinaryFromReader);
      msg.setAfterposition(value);
      break;
    case 2:
      var value = new proto.eventstore.Query;
      reader.readMessage(value,proto.eventstore.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriberName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoundary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.CatchUpSubscribeToEventStoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfterposition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eventstore.Position.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eventstore.Query.serializeBinaryToWriter
    );
  }
  f = message.getSubscriberName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBoundary();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Position afterPosition = 1;
 * @return {?proto.eventstore.Position}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.getAfterposition = function() {
  return /** @type{?proto.eventstore.Position} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.Position, 1));
};


/**
 * @param {?proto.eventstore.Position|undefined} value
 * @return {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} returns this
*/
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.setAfterposition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.clearAfterposition = function() {
  return this.setAfterposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.hasAfterposition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Query query = 2;
 * @return {?proto.eventstore.Query}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.getQuery = function() {
  return /** @type{?proto.eventstore.Query} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.Query, 2));
};


/**
 * @param {?proto.eventstore.Query|undefined} value
 * @return {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} returns this
*/
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string subscriber_name = 3;
 * @return {string}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.getSubscriberName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.setSubscriberName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string boundary = 4;
 * @return {string}
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.getBoundary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.CatchUpSubscribeToEventStoreRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToEventStoreRequest.prototype.setBoundary = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.eventstore.CatchUpSubscribeToStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eventstore.CatchUpSubscribeToStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.eventstore.Query.toObject(includeInstance, f),
    subscriberName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    boundary: jspb.Message.getFieldWithDefault(msg, 4, ""),
    stream: jspb.Message.getFieldWithDefault(msg, 5, ""),
    afterversion: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventstore.CatchUpSubscribeToStreamRequest}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventstore.CatchUpSubscribeToStreamRequest;
  return proto.eventstore.CatchUpSubscribeToStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventstore.CatchUpSubscribeToStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventstore.CatchUpSubscribeToStreamRequest}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.eventstore.Query;
      reader.readMessage(value,proto.eventstore.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriberName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoundary(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAfterversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eventstore.CatchUpSubscribeToStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventstore.CatchUpSubscribeToStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eventstore.Query.serializeBinaryToWriter
    );
  }
  f = message.getSubscriberName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBoundary();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAfterversion();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional Query query = 2;
 * @return {?proto.eventstore.Query}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.getQuery = function() {
  return /** @type{?proto.eventstore.Query} */ (
    jspb.Message.getWrapperField(this, proto.eventstore.Query, 2));
};


/**
 * @param {?proto.eventstore.Query|undefined} value
 * @return {!proto.eventstore.CatchUpSubscribeToStreamRequest} returns this
*/
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eventstore.CatchUpSubscribeToStreamRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string subscriber_name = 3;
 * @return {string}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.getSubscriberName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.CatchUpSubscribeToStreamRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.setSubscriberName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string boundary = 4;
 * @return {string}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.getBoundary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.CatchUpSubscribeToStreamRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.setBoundary = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string stream = 5;
 * @return {string}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.eventstore.CatchUpSubscribeToStreamRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 afterVersion = 6;
 * @return {number}
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.getAfterversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.eventstore.CatchUpSubscribeToStreamRequest} returns this
 */
proto.eventstore.CatchUpSubscribeToStreamRequest.prototype.setAfterversion = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.eventstore.Direction = {
  ASC: 0,
  DESC: 1
};

goog.object.extend(exports, proto.eventstore);
